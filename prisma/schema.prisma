// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  passwordHash String
  role         String      @default("USER")
  Profile      Profile?
  Interview    Interview[] // A user can have many Interviews
}

model Profile {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int    @unique
  firstName String
  lastName  String
}

model Interview {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userId], references: [id]) // An Interview can have only one User
  userId           Int
  currentRound     Int                @default(0)
  maxRound         Int
  level            String             @default("Junior")
  createdAt        DateTime           @default(now())
  interviewStats   InterviewStats?
  InterviewMessage InterviewMessage[]
  InterviewSummary InterviewSummary[]
}

model InterviewStats {
  id             Int       @id @default(autoincrement())
  interview      Interview @relation(fields: [interviewId], references: [id])
  interviewId    Int       @unique
  good           Boolean?
  silenceSeconds Int?
}

model InterviewMessage {
  id          Int               @id @default(autoincrement())
  interview   Interview         @relation(fields: [interviewId], references: [id])
  interviewId Int
  summary     InterviewSummary? @relation(fields: [summaryId], references: [id])
  summaryId   Int?
  message     String
  author      String
  createdAt   DateTime          @default(now())
}

model InterviewSummary {
  id               Int                @id @default(autoincrement())
  interview        Interview          @relation(fields: [interviewId], references: [id])
  interviewId      Int
  summary          String
  createdAt        DateTime           @default(now())
  InterviewMessage InterviewMessage[]
}
